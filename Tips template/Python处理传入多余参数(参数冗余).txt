再定义函数的时候这样写：
def f(x, *args):
    print x
    print args


f(1)
output:
1
()


f(1,2,3)
output:
1
(2, 3)


意思就是说，这样定义函数，多余的参数就会被收到名为args的元组中。没有多余的参数的话，args就是空的元组



另外在调用函数时，传入实参
*args  表明传入 元组
**kwargs 表明传入 字典



这就是参数冗余的处理方式，但其实有两种情况：
需要处理的冗余参数是直接传入的值的情况下，定义函数的时候习惯用*定义出 用于接受冗余参数的元组 比如 *args (名字可以随便起)


需要处理的冗余参数是以指定参数传入(有映射关系)的情况下，定义函数的时候要用**定义出 用于接受冗余指定参数的字典 比如 **kwargs


def f(x, *args, **kwargs):
    print x
    print args
    print kwargs


f(1)
output:
1
()
{}

f(1,2,3,4,5,6)
output:
1
(2, 3, 4, 5, 6)
{}

f(x=1, y=2)
output:
1
()
{'y': 2}


